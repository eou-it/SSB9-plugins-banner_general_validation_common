
/*******************************************************************************
 Copyright 2015 Ellucian Company L.P. and its affiliates.
 *******************************************************************************/
package net.hedtech.banner.general.lettergeneration

import javax.persistence.Column
import javax.persistence.Entity
import javax.persistence.GeneratedValue
import javax.persistence.Id
import javax.persistence.Table
import javax.persistence.Version
import javax.persistence.NamedQueries
import javax.persistence.NamedQuery
import javax.persistence.Transient
import javax.persistence.GenerationType
import javax.persistence.SequenceGenerator
import javax.persistence.Temporal
import javax.persistence.TemporalType
import org.hibernate.annotations.GenericGenerator
import org.hibernate.annotations.Type


/**
 * Population Selection Extract Base Table
 */
//TODO: NamedQueries that need to be ported:
/**
 * Where clause on this entity present in forms:
 * Order by clause on this entity present in forms:
 */
@Entity
@Table(name = "GLBEXTR")
@NamedQueries(value = [
        @NamedQuery(name = "PopulationSelectionExtract.fetchAllPidmsByApplicationSelectionCreatorIdLastModifiedBy",
                query = """SELECT a.key FROM  PopulationSelectionExtract a
		           WHERE a.application = :application
		           AND   a.selection = :selection
		           AND   a.creatorId = :creatorId
		           AND   a.lastModifiedBy = :lastModifiedBy""")])
class PopulationSelectionExtract implements Serializable {

    /**
     * Surrogate ID for GLBEXTR
     */
    @Id
    @Column(name="GLBEXTR_SURROGATE_ID")
    @SequenceGenerator(name ="GLBEXTR_SEQ_GEN", allocationSize =1, sequenceName  ="GLBEXTR_SURROGATE_ID_SEQUENCE")
    @GeneratedValue(strategy =GenerationType.SEQUENCE, generator ="GLBEXTR_SEQ_GEN")
    Long id

    /**
     * Optimistic lock token for GLBEXTR
     */
    @Version
    @Column(name = "GLBEXTR_VERSION")
    Long version

    /**
     * APPLICATION: The name of the Application that the Population Selection Identifier belongs to.
     */
    @Column(name = "GLBEXTR_APPLICATION")
    String application

    /**
     * SELECTION: The name of the Population Selection Identifier that was used to create this Report Extract record.
     */
    @Column(name = "GLBEXTR_SELECTION")
    String selection

    /**
     * CREATOR ID: The ID of the creator of this Population Selection Identifier.
     */
    @Column(name = "GLBEXTR_CREATOR_ID")
    String creatorId

    /**
     * None
     */
    @Column(name = "GLBEXTR_KEY")
    String key

    /**
     * SYSTEM INDICATOR:  Indicates source of the record.  Values are (S)ystem-generated by the GLBDATA process; (M)anually entered on the GLAEXTR form.
     */
    @Column(name = "GLBEXTR_SYS_IND")
    String systemIndicator

    /**
     * SELECT INDICATOR: This field is used by the Batch Group Process and indicates whether the student has been processed already.
     */
    @Column(name = "GLBEXTR_SLCT_IND")
    String selectIndicator

    /**
     * ACTIVITY DATE: The date that information for this record in the table was entered or last updated
     */
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "GLBEXTR_ACTIVITY_DATE")
    Date lastModified

    /**
     * USER ID: The logon ID of the user who entered or last updated the record in this table.
     */
    @Column(name = "GLBEXTR_USER_ID")
    String lastModifiedBy

    /**
     * Data origin column for GLBEXTR
     */
    @Column(name = "GLBEXTR_DATA_ORIGIN")
    String dataOrigin



    public String toString() {
        """PopulationSelectionExtract[
					id=$id, 
					version=$version, 
					application=$application, 
					selection=$selection, 
					creatorId=$creatorId, 
					key=$key, 
					systemIndicator=$systemIndicator, 
					selectIndicator=$selectIndicator, 
					lastModified=$lastModified, 
					lastModifiedBy=$lastModifiedBy, 
					dataOrigin=$dataOrigin]"""
    }


    boolean equals(o) {
        if (this.is(o)) return true
        if (!(o instanceof PopulationSelectionExtract)) return false
        PopulationSelectionExtract that = (PopulationSelectionExtract) o
        if(id != that.id) return false
        if(version != that.version) return false
        if(application != that.application) return false
        if(selection != that.selection) return false
        if(creatorId != that.creatorId) return false
        if(key != that.key) return false
        if(systemIndicator != that.systemIndicator) return false
        if(selectIndicator != that.selectIndicator) return false
        if(lastModified != that.lastModified) return false
        if(lastModifiedBy != that.lastModifiedBy) return false
        if(dataOrigin != that.dataOrigin) return false
        return true
    }


    int hashCode() {
        int result
        result = (id != null ? id.hashCode() : 0)
        result = 31 * result + (version != null ? version.hashCode() : 0)
        result = 31 * result + (application != null ? application.hashCode() : 0)
        result = 31 * result + (selection != null ? selection.hashCode() : 0)
        result = 31 * result + (creatorId != null ? creatorId.hashCode() : 0)
        result = 31 * result + (key != null ? key.hashCode() : 0)
        result = 31 * result + (systemIndicator != null ? systemIndicator.hashCode() : 0)
        result = 31 * result + (selectIndicator != null ? selectIndicator.hashCode() : 0)
        result = 31 * result + (lastModified != null ? lastModified.hashCode() : 0)
        result = 31 * result + (lastModifiedBy != null ? lastModifiedBy.hashCode() : 0)
        result = 31 * result + (dataOrigin != null ? dataOrigin.hashCode() : 0)
        return result
    }

    static constraints = {
        application(nullable:false, maxSize:30)
        selection(nullable:false, maxSize:30)
        key(nullable:false, maxSize:80)
        systemIndicator(nullable:false, maxSize:1, inList:["M","S"])
        selectIndicator(nullable:true, maxSize:1, inList:["Y"])
        lastModified(nullable:true)
        lastModifiedBy(nullable:true, maxSize:30)
        dataOrigin(nullable:true, maxSize:30)
    }

    //Read Only fields that should be protected against update
    public static readonlyProperties = [ 'application', 'selection', 'creatorId', 'key', 'lastModifiedBy' ]

    public static List fetchAllPidmsByApplicationSelectionCreatorIdLastModifiedBy(String application, String selection, String creatorId, String lastModifiedBy)
    {
        List<Integer> pidms = []
        //List<String> pidmstr =[]
        def pidmsres =[]
        if (application && selection && creatorId)
        {
            PopulationSelectionExtract.withSession {
                session ->
                    pidmsres = session.getNamedQuery( 'PopulationSelectionExtract.fetchAllPidmsByApplicationSelectionCreatorIdLastModifiedBy' ).setString( 'application', application ).setString( 'selection', selection ).setString( 'creatorId', creatorId ).setString( 'lastModifiedBy', lastModifiedBy ).list()
            }
        }

        //pidmsres.each{pidmstr<<it.trim()}
        pidmsres.each{pidms<<it.toInteger() }
        return pidms
    }
}
