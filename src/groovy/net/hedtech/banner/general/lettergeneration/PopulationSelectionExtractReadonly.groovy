/*******************************************************************************
 Copyright 2015 Ellucian Company L.P. and its affiliates.
 *******************************************************************************/
package net.hedtech.banner.general.lettergeneration

import javax.persistence.*

/**
 * Population Selection Extract Base Table
 */

@Entity
@Table(name = "GVQ_GLBEXTR")
@NamedQueries(value = [
        @NamedQuery(name = "PopulationSelectionExtractReadonly.fetchAllPidmsByApplicationSelectionCreatorIdLastModifiedBy",
                query = """FROM PopulationSelectionExtractReadonly a
                    WHERE a.application = :application
		            AND   a.selection = :selection
		            AND   a.creatorId = :creatorId
		            AND   a.lastModifiedBy = :lastModifiedBy""")])
class PopulationSelectionExtractReadonly implements Serializable {

    /**
     * Surrogate ID for GLBEXTR
     */
    @Id
    @Column(name = "GLBEXTR_SURROGATE_ID")
    @SequenceGenerator(name = "GLBEXTR_SEQ_GEN", allocationSize = 1, sequenceName = "GLBEXTR_SURROGATE_ID_SEQUENCE")
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "GLBEXTR_SEQ_GEN")
    Long id

    /**
     * Optimistic lock token for GLBEXTR
     */
    @Version
    @Column(name = "GLBEXTR_VERSION")
    Long version

    /**
     * APPLICATION: The name of the Application that the Population Selection Identifier belongs to.
     */
    @Column(name = "GLBEXTR_APPLICATION")
    String application

    /**
     * SELECTION: The name of the Population Selection Identifier that was used to create this Report Extract record.
     */
    @Column(name = "GLBEXTR_SELECTION")
    String selection

    /**
     * CREATOR ID: The ID of the creator of this Population Selection Identifier.
     */
    @Column(name = "GLBEXTR_CREATOR_ID")
    String creatorId

    /**
     * None
     */
    @Column(name = "GLBEXTR_KEY")
    String key

    /**
     * None
     */
    @Column(name = "GLBEXTR_NUMERIC_KEY")
    Long numericKey

    /**
     * SYSTEM INDICATOR:  Indicates source of the record.  Values are (S)ystem-generated by the GLBDATA process; (M)anually entered on the GLAEXTR form.
     */
    @Column(name = "GLBEXTR_SYS_IND")
    String systemIndicator

    /**
     * SELECT INDICATOR: This field is used by the Batch Group Process and indicates whether the student has been processed already.
     */
    @Column(name = "GLBEXTR_SLCT_IND")
    String selectIndicator

    /**
     * ACTIVITY DATE: The date that information for this record in the table was entered or last updated
     */
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "GLBEXTR_ACTIVITY_DATE")
    Date lastModified

    /**
     * USER ID: The logon ID of the user who entered or last updated the record in this table.
     */
    @Column(name = "GLBEXTR_USER_ID")
    String lastModifiedBy

    /**
     * Data origin column for GLBEXTR
     */
    @Column(name = "GLBEXTR_DATA_ORIGIN")
    String dataOrigin

    @Column(name="SPRIDEN_PIDM")
    Integer pidm
    @Column(name="SPRIDEN_LAST_NAME")
    String lastName
    @Column(name="SPRIDEN_FIRST_NAME")
    String firstName
    @Column(name="SPRIDEN_MI")
    String mi
    @Column(name="SPRIDEN_ID")
    String bannerId


    public String toString() {
        """PopulationSelectionExtract[
					id=$id, 
					version=$version, 
					application=$application, 
					selection=$selection, 
					creatorId=$creatorId, 
					key=$key,
                    numericKey=$numericKey,
					systemIndicator=$systemIndicator, 
					selectIndicator=$selectIndicator, 
					lastModified=$lastModified, 
					lastModifiedBy=$lastModifiedBy, 
					dataOrigin=$dataOrigin,
                    pidm=$pidm,
                    lastName=$lastName,
                    firsName=$firstName,
                    mi=$mi,
                    bannerId=$bannerId
                    ]"""
    }




    static constraints = {
        application(nullable: false, maxSize: 30)
        selection(nullable: false, maxSize: 30)
        key(nullable: false, maxSize: 80)
        systemIndicator(nullable: false, maxSize: 1, inList: ["M", "S"])
        selectIndicator(nullable: true, maxSize: 1, inList: ["Y"])
        lastModified(nullable: true)
        lastModifiedBy(nullable: true, maxSize: 30)
        dataOrigin(nullable: true, maxSize: 30)
        numericKey(nullable: true)
        bannerId(nullable: true)
        pidm(nullable: true)
        lastName(nullable: true)
        firstName(nullable: true)
        mi(nullable: true)
    }

    //Read Only fields that should be protected against update

    public static List fetchAllPidmsByApplicationSelectionCreatorIdLastModifiedBy(String application,
                                                                                  String selection,
                                                                                  String creatorId,
                                                                                  String lastModifiedBy,
                                                                                  def params = [:]) {

        def pidmsres = []
        if (application && selection && creatorId) {
            pidmsres = PopulationSelectionExtractReadonly.withSession
                    { session ->
                        org.hibernate.Query query1 = session.getNamedQuery('PopulationSelectionExtractReadonly.fetchAllPidmsByApplicationSelectionCreatorIdLastModifiedBy')
                        def orderBy
                        if (params.sort) {
                            orderBy = " order by a." + params.sort
                        }
                        else {
                            orderBy = " order by a.lastName, a.firstName, a.mi, a.bannerId"
                        }
                        org.hibernate.Query query = session.createQuery(query1.getQueryString() + orderBy)

                        query.setString('application', application).setString('selection', selection)
                                .setString('creatorId', creatorId).setString('lastModifiedBy', lastModifiedBy)
                        def max
                        def offset
                        if ( params.max) {
                            if (params.max instanceof String) max = params.max.toInteger()
                            else max = params.max
                            query.setMaxResults(max)
                        }
                        if ( params.offset) {
                            if (params.offset instanceof String) offset = params.offset.toInteger()
                            else offset = params.offset
                            query.setFirstResult(offset)
                        }
                        query.list()
                    }
        }
        return pidmsres
    }

}
